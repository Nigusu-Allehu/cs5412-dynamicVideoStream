import { Component, ViewChild, Input } from '@angular/core';
export class NgAmpComponent {
    constructor() { }
    ngOnInit() {
        if (document.querySelector('#ng-amp')) {
            return;
        }
        const scriptTag = document.createElement('script');
        scriptTag.id = 'ng-amp';
        scriptTag.src = '//amp.azure.net/libs/amp/2.3.5/azuremediaplayer.min.js';
        scriptTag.onload = () => this.onLoadInit();
        const linkTag = document.createElement('link');
        linkTag.rel = 'stylesheet';
        linkTag.href = '//amp.azure.net/libs/amp/2.3.5/skins/amp-default/azuremediaplayer.min.css';
        document.body.appendChild(scriptTag);
        document.head.insertBefore(linkTag, document.head.firstChild);
    }
    onLoadInit() {
        const config = {
            controls: this.controls !== false,
            autoplay: this.autoplay,
            poster: this.poster,
            width: this.width,
            height: this.height,
            fluid: this.fluid,
            logo: { enabled: false },
        };
        const component = amp(this.videoPlayer.nativeElement, config);
        component.src([{
                src: this.src,
                type: 'application/vnd.ms-sstr+xml'
            }]);
        this.videoPlayer.ngComponent = component;
    }
}
NgAmpComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-amp',
                template: `
    <video #video class="azuremediaplayer amp-default-skin" controls>
      <p class="amp-no-js">
          To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video.
      </p>
    </video>
  `
            },] }
];
NgAmpComponent.ctorParameters = () => [];
NgAmpComponent.propDecorators = {
    videoPlayer: [{ type: ViewChild, args: ['video',] }],
    src: [{ type: Input }],
    controls: [{ type: Input }],
    autoplay: [{ type: Input }],
    poster: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    fluid: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctYW1wLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25nLWFtcC9zcmMvbGliL25nLWFtcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBZ0JwRSxNQUFNLE9BQU8sY0FBYztJQVV6QixnQkFBZ0IsQ0FBQztJQUVqQixRQUFRO1FBQ04sSUFBSSxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQUUsT0FBTztTQUFFO1FBQ2xELE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkQsU0FBUyxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUM7UUFDeEIsU0FBUyxDQUFDLEdBQUcsR0FBRyx3REFBd0QsQ0FBQztRQUN6RSxTQUFTLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMzQyxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLE9BQU8sQ0FBQyxHQUFHLEdBQUcsWUFBWSxDQUFDO1FBQzNCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsMkVBQTJFLENBQUM7UUFDM0YsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVPLFVBQVU7UUFDaEIsTUFBTSxNQUFNLEdBQUc7WUFDYixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLO1lBQ2pDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsSUFBSSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRTtTQUN6QixDQUFDO1FBQ0YsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzlELFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDYixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2IsSUFBSSxFQUFFLDZCQUE2QjthQUNwQyxDQUFDLENBQUMsQ0FBQztRQUNKLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztJQUMzQyxDQUFDOzs7WUFyREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxRQUFRO2dCQUNsQixRQUFRLEVBQUU7Ozs7OztHQU1UO2FBR0Y7Ozs7MEJBRUUsU0FBUyxTQUFDLE9BQU87a0JBQ2pCLEtBQUs7dUJBQ0wsS0FBSzt1QkFDTCxLQUFLO3FCQUNMLEtBQUs7b0JBQ0wsS0FBSztxQkFDTCxLQUFLO29CQUNMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgVmlld0NoaWxkLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5kZWNsYXJlIHZhciBhbXA6IGFueTsgLy8gdG9kbzogdXNlIHRoZSBhbXAgZC50c1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZy1hbXAnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDx2aWRlbyAjdmlkZW8gY2xhc3M9XCJhenVyZW1lZGlhcGxheWVyIGFtcC1kZWZhdWx0LXNraW5cIiBjb250cm9scz5cbiAgICAgIDxwIGNsYXNzPVwiYW1wLW5vLWpzXCI+XG4gICAgICAgICAgVG8gdmlldyB0aGlzIHZpZGVvIHBsZWFzZSBlbmFibGUgSmF2YVNjcmlwdCwgYW5kIGNvbnNpZGVyIHVwZ3JhZGluZyB0byBhIHdlYiBicm93c2VyIHRoYXQgc3VwcG9ydHMgSFRNTDUgdmlkZW8uXG4gICAgICA8L3A+XG4gICAgPC92aWRlbz5cbiAgYCxcbiAgc3R5bGVzOiBbXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTmdBbXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBAVmlld0NoaWxkKCd2aWRlbycpIHZpZGVvUGxheWVyO1xuICBASW5wdXQoKSBzcmM6IHN0cmluZztcbiAgQElucHV0KCkgY29udHJvbHM6IGJvb2xlYW47XG4gIEBJbnB1dCgpIGF1dG9wbGF5OiBib29sZWFuO1xuICBASW5wdXQoKSBwb3N0ZXI6IHN0cmluZztcbiAgQElucHV0KCkgd2lkdGg6IG51bWJlcjtcbiAgQElucHV0KCkgaGVpZ2h0OiBudW1iZXI7XG4gIEBJbnB1dCgpIGZsdWlkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZy1hbXAnKSkgeyByZXR1cm47IH1cbiAgICBjb25zdCBzY3JpcHRUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHRUYWcuaWQgPSAnbmctYW1wJztcbiAgICBzY3JpcHRUYWcuc3JjID0gJy8vYW1wLmF6dXJlLm5ldC9saWJzL2FtcC8yLjMuNS9henVyZW1lZGlhcGxheWVyLm1pbi5qcyc7XG4gICAgc2NyaXB0VGFnLm9ubG9hZCA9ICgpID0+IHRoaXMub25Mb2FkSW5pdCgpO1xuICAgIGNvbnN0IGxpbmtUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgbGlua1RhZy5yZWwgPSAnc3R5bGVzaGVldCc7XG4gICAgbGlua1RhZy5ocmVmID0gJy8vYW1wLmF6dXJlLm5ldC9saWJzL2FtcC8yLjMuNS9za2lucy9hbXAtZGVmYXVsdC9henVyZW1lZGlhcGxheWVyLm1pbi5jc3MnO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0VGFnKTtcbiAgICBkb2N1bWVudC5oZWFkLmluc2VydEJlZm9yZShsaW5rVGFnLCBkb2N1bWVudC5oZWFkLmZpcnN0Q2hpbGQpO1xuICB9XG5cbiAgcHJpdmF0ZSBvbkxvYWRJbml0KCk6IHZvaWQge1xuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIGNvbnRyb2xzOiB0aGlzLmNvbnRyb2xzICE9PSBmYWxzZSxcbiAgICAgIGF1dG9wbGF5OiB0aGlzLmF1dG9wbGF5LFxuICAgICAgcG9zdGVyOiB0aGlzLnBvc3RlcixcbiAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCxcbiAgICAgIGZsdWlkOiB0aGlzLmZsdWlkLFxuICAgICAgbG9nbzogeyBlbmFibGVkOiBmYWxzZSB9LFxuICAgIH07XG4gICAgY29uc3QgY29tcG9uZW50ID0gYW1wKHRoaXMudmlkZW9QbGF5ZXIubmF0aXZlRWxlbWVudCwgY29uZmlnKTtcbiAgICBjb21wb25lbnQuc3JjKFt7XG4gICAgICBzcmM6IHRoaXMuc3JjLFxuICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5tcy1zc3RyK3htbCdcbiAgICB9XSk7XG4gICAgdGhpcy52aWRlb1BsYXllci5uZ0NvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgfVxufVxuIl19